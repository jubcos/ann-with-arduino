#include <Adafruit_GFX.h>
#include <MCUFRIEND_kbv.h>
#include <TouchScreen.h>

const int MAX = 8;

// Neural Network parameters
const int input_neurons = 64;
const int hidden_neurons = 24;
const int output_neurons = 5;
float weights_input_hidden[64][24] = {
  {0.186531, 0.218133, 0.020380, 0.015651, 0.243905, -0.021037, 0.092124, 0.069918, -0.017730, -0.196944, 0.229855, 0.154664, 0.208664, 0.057177, -0.047315, 0.089452, 0.259969, 0.226403, -0.022485, 0.151099, -0.028551, 0.215435, -0.197585, -0.063052},
  {-0.423306, 0.081864, -0.065731, 0.151415, -0.008330, 0.080685, -0.181784, -0.097402, 0.190220, -0.202960, 0.041278, -0.300651, 0.042906, 0.326183, 0.043645, -0.300085, 0.298023, -0.280583, -0.044109, -0.063145, -0.239702, 0.517276, -0.082413, 0.026851},
  {0.109423, -0.200112, 0.235206, 0.024584, -0.389330, -0.263284, 0.167171, -0.142618, -0.044970, 0.114896, -0.060405, 0.079099, 0.144773, 0.018291, 0.044280, 0.008822, -0.043866, -0.398906, 0.157408, -0.358522, -0.227417, 0.007754, -0.487601, -0.296731},
  {-0.207658, -0.082221, -0.225146, 0.303244, -0.024640, 0.044687, 0.065457, 0.214023, 0.010977, 0.069557, 0.246600, -0.074012, 0.206984, 0.352369, 0.147605, -0.142507, 0.117224, -0.006507, 0.326696, -0.010601, 0.087922, 0.417710, -0.333367, 0.031833},
  {-0.340550, -0.115700, -0.075161, 0.015897, 0.201332, -0.246887, 0.113019, 0.003975, -0.105476, 0.047467, -0.053503, -0.172865, -0.122715, 0.414075, 0.097831, -0.342053, -0.158464, -0.069565, 0.122875, 0.262933, 0.000524, 0.058376, 0.035952, 0.139280},
  {-0.419908, -0.163958, 0.039271, 0.265101, -0.126689, -0.269930, 0.302511, -0.314534, -0.214967, 0.090809, -0.078412, 0.042848, -0.154699, 0.334084, -0.030649, 0.024131, 0.268979, 0.207598, -0.244753, 0.144398, 0.106308, -0.193588, -0.183235, 0.014671},
  {-0.192619, 0.114957, 0.218363, 0.266156, -0.412351, 0.134289, 0.188897, -0.224723, 0.099639, 0.072494, 0.184986, -0.045814, -0.254987, 0.162441, -0.212077, -0.004504, 0.460206, 0.411067, -0.375559, 0.092513, -0.127575, -0.390754, 0.000445, -0.044831},
  {0.081994, 0.182093, -0.153216, 0.096389, 0.027593, -0.077075, 0.063753, 0.286561, -0.026248, 0.209822, -0.040027, 0.083891, 0.141835, -0.118335, 0.147141, -0.113764, 0.022082, -0.261072, -0.244645, -0.078923, 0.132758, -0.139487, 0.159165, 0.028147},
  {0.152275, 0.100413, 0.143541, 0.216176, -0.245055, 0.008827, -0.301546, 0.103302, 0.238981, -0.132502, 0.239218, -0.062834, 0.011536, -0.165270, -0.258155, 0.008585, -0.002720, 0.002244, -0.024198, -0.061709, -0.091547, -0.148939, -0.181657, 0.215598},
  {-0.368023, 0.005455, 0.312729, 0.115190, -0.028606, 0.053449, -0.051566, 0.253962, -0.248844, 0.123884, 0.019823, -0.121901, 0.090542, 0.186359, -0.081644, -0.064387, 0.030804, -0.311082, 0.303667, -0.576871, -0.003148, 0.064761, 0.032759, 0.089856},
  {0.005846, 0.056000, -0.244761, -0.096787, -0.134158, 0.072318, 0.335846, 0.084108, -0.207307, -0.281790, -0.082787, 0.361123, 0.152165, 0.362939, -0.208224, -0.207664, 0.224984, -0.116960, 0.108799, -0.054385, 0.000157, 0.301039, -0.147438, 0.202182},
  {0.025210, -0.094661, 0.168150, 0.022672, -0.091239, 0.036802, -0.143807, 0.233401, -0.049289, -0.047795, 0.075324, -0.086757, 0.015873, -0.077881, -0.275381, -0.000629, -0.109411, 0.198096, -0.025698, -0.050434, -0.050919, -0.072781, 0.227436, 0.012063},
  {-0.058010, -0.244754, 0.225648, -0.027102, -0.302916, 0.006137, -0.062447, -0.154422, -0.201965, -0.248489, -0.048776, -0.167621, 0.398530, 0.188692, 0.140283, 0.260063, 0.020505, 0.050190, 0.138611, 0.126266, -0.120180, 0.224122, -0.197812, -0.081226},
  {-0.039382, -0.259861, -0.137426, -0.171525, -0.172068, -0.065999, 0.015613, -0.070743, 0.219988, 0.210484, -0.265296, 0.365767, 0.163833, 0.113489, 0.107133, -0.128521, -0.143726, 0.037299, -0.009450, 0.311443, -0.053459, 0.284513, -0.522106, -0.109215},
  {-0.247552, -0.037838, 0.190108, 0.122508, -0.016520, -0.192894, 0.174290, -0.221272, -0.181218, 0.232215, -0.326656, 0.071911, -0.188705, 0.387012, 0.127582, -0.066088, 0.243100, 0.028850, -0.409225, -0.153049, -0.309732, 0.239905, -0.170119, -0.186304},
  {0.261796, -0.140329, -0.183950, -0.054079, 0.269313, 0.001907, 0.043822, 0.285100, 0.145370, 0.247079, -0.444793, 0.088327, -0.153616, 0.168717, -0.121035, -0.122639, -0.249596, 0.001951, 0.000284, -0.064928, 0.063245, -0.173421, 0.340360, 0.145938},
  {-0.103465, 0.214300, 0.335617, 0.175952, -0.361998, 0.030331, 0.108056, -0.067206, 0.213327, 0.265264, 0.059929, 0.005176, -0.392189, 0.188036, 0.027934, 0.214895, 0.192975, -0.022397, 0.144465, -0.013466, -0.409863, -0.356289, -0.224702, 0.048747},
  {-0.162008, 0.040701, 0.215586, 0.059581, 0.223653, -0.033107, 0.131184, 0.293533, 0.143162, -0.097739, 0.132334, 0.333523, 0.070494, 0.256727, -0.023953, 0.213890, 0.046836, -0.162310, 0.093006, 0.336225, -0.077193, 0.210427, -0.180129, 0.128319},
  {-0.080430, -0.107155, 0.207727, -0.258156, 0.294324, 0.130122, -0.244117, 0.117619, 0.221567, 0.117254, 0.177776, 0.208974, 0.009323, -0.293462, -0.048906, 0.449916, 0.136557, 0.018028, 0.232531, -0.166169, 0.380155, 0.243517, -0.154141, 0.025402},
  {0.364718, 0.124498, -0.060289, 0.058691, -0.075121, -0.066323, -0.019197, -0.467008, 0.045664, 0.125128, -0.010035, 0.125447, -0.336692, -0.494112, -0.241839, 0.554027, -0.067103, 0.287913, 0.019235, 0.362267, 0.024257, -0.491709, 0.075950, -0.037771},
  {-0.062147, 0.083105, 0.364675, 0.348922, -0.328885, 0.165952, 0.298786, 0.057074, -0.157234, -0.051168, 0.297849, -0.211446, -0.306920, 0.002536, 0.212394, -0.044600, 0.099020, 0.297400, 0.136097, 0.429297, -0.250768, -0.296651, -0.228909, -0.275376},
  {0.029631, -0.091684, -0.090620, -0.242020, -0.221692, -0.074256, -0.033484, 0.359408, -0.151502, 0.062779, -0.238974, 0.025925, 0.413883, -0.020857, 0.144018, 0.250282, -0.238651, 0.066858, -0.234950, -0.127005, 0.040751, 0.339805, -0.350877, -0.061861},
  {0.085836, 0.103140, -0.174067, 0.021547, 0.181650, 0.218933, -0.274194, 0.165061, -0.000722, -0.079268, 0.124133, 0.021868, 0.228368, -0.131105, 0.348644, -0.012550, -0.132714, -0.195298, -0.382347, -0.056487, 0.108971, 0.019116, 0.304691, -0.083520},
  {0.116359, 0.160844, 0.182754, -0.251354, 0.322161, 0.271788, -0.356882, -0.002928, 0.158959, -0.093707, -0.349234, -0.164338, -0.199589, 0.100790, -0.242245, 0.201578, -0.046310, 0.100164, -0.013490, -0.017211, 0.073456, -0.029994, 0.405143, 0.071627},
  {0.082730, -0.173307, 0.266967, 0.304217, -0.434878, 0.042012, -0.201587, -0.009747, -0.163001, 0.009956, 0.341688, -0.308380, -0.012992, -0.127502, -0.209869, 0.443321, 0.377964, 0.203396, 0.389610, 0.174648, 0.085587, -0.320192, -0.121226, -0.194262},
  {0.381407, -0.012903, -0.136780, -0.233491, 0.092652, 0.220609, -0.032569, 0.165367, 0.075915, 0.199078, -0.414071, 0.028291, -0.198427, -0.354268, 0.040370, -0.002094, -0.055379, 0.035575, 0.055765, -0.044299, 0.353272, -0.051169, 0.156615, 0.356171},
  {0.420821, -0.019570, 0.079189, -0.210700, 0.155495, 0.265361, 0.015595, 0.012638, -0.125904, 0.257222, -0.407695, 0.429114, 0.163323, -0.456340, -0.071430, 0.287427, -0.085342, 0.436580, -0.116517, 0.299889, 0.026938, -0.169849, 0.384983, 0.323654},
  {0.255396, -0.213801, -0.025035, -0.123540, -0.098283, 0.023880, 0.190456, -0.290792, -0.191020, 0.639190, 0.041152, -0.293653, -0.529813, -0.161708, 0.068795, 0.183524, 0.185386, 0.570533, -0.373593, 0.374773, -0.117790, 0.001033, 0.073347, 0.030797},
  {0.276637, 0.004498, 0.264484, 0.147167, -0.124579, 0.021081, -0.094308, -0.380884, -0.200644, 0.201883, -0.028989, -0.562580, -0.571512, 0.043156, 0.205589, -0.228496, 0.143807, 0.089384, 0.090517, 0.335183, -0.042075, 0.121552, -0.026924, -0.372446},
  {0.009332, -0.038768, 0.287419, -0.019224, 0.192745, 0.045630, -0.249980, 0.181203, -0.142055, -0.079226, 0.206130, 0.224251, 0.232562, 0.034234, 0.053202, 0.379559, 0.042856, -0.045386, -0.222206, -0.008926, -0.029598, -0.130054, 0.004406, 0.141572},
  {0.167321, -0.010294, 0.188119, -0.123244, 0.146451, -0.010776, -0.407231, 0.225854, 0.149625, 0.041839, 0.062916, 0.380093, 0.312857, -0.146928, 0.346410, 0.364870, 0.137490, -0.138504, -0.155900, -0.404275, 0.063130, 0.176841, 0.581273, 0.128279},
  {-0.090050, 0.250889, 0.237203, -0.219168, -0.150256, -0.128549, 0.030973, 0.126204, -0.007501, 0.378408, -0.283567, -0.063582, 0.082897, 0.215242, 0.228210, 0.217023, -0.275280, -0.063774, 0.122426, -0.037192, 0.111018, 0.155120, 0.302579, 0.161112},
  {0.153860, -0.042051, -0.203992, -0.166846, 0.258115, -0.203136, 0.141043, 0.008310, 0.132345, -0.044983, -0.046121, -0.179208, 0.150378, 0.246949, 0.005939, -0.213594, 0.250042, -0.073439, -0.003262, 0.103251, 0.133782, -0.162432, -0.025621, -0.048845},
  {-0.034349, 0.221024, -0.092283, -0.066982, 0.221750, 0.291088, -0.181539, 0.047980, 0.037267, 0.341868, -0.335805, 0.060040, 0.217079, -0.014179, -0.118628, 0.062516, 0.016439, -0.323534, -0.137794, -0.183604, 0.234424, 0.122839, 0.589582, 0.128928},
  {-0.090906, -0.121449, -0.004341, 0.054022, 0.362748, 0.307877, -0.044031, 0.412413, -0.075382, 0.274375, -0.137805, 0.309219, -0.041389, -0.220407, -0.106074, -0.006186, -0.146667, -0.093491, 0.116400, -0.192722, 0.227808, -0.257120, 0.154318, 0.092253},
  {0.328411, -0.122066, 0.334998, 0.031337, 0.102552, -0.036715, 0.112640, -0.139341, -0.186063, 0.130796, 0.069143, 0.048730, -0.060331, -0.119610, -0.020951, 0.184809, -0.178032, -0.064924, -0.003398, 0.200846, -0.113953, 0.078333, 0.139350, 0.009493},
  {0.201322, 0.129944, 0.301609, 0.119150, -0.117482, 0.245359, 0.113010, -0.000420, -0.180051, 0.420281, 0.274675, -0.406680, -0.087753, 0.368013, -0.045869, 0.247796, 0.443631, 0.154645, 0.086749, 0.191682, -0.332534, -0.318587, 0.378386, -0.264210},
  {0.218486, -0.092025, 0.254255, -0.032502, 0.295684, 0.312301, 0.345121, -0.045381, -0.202122, 0.210847, -0.253080, -0.038446, -0.186260, -0.103458, -0.188504, 0.153106, 0.119949, -0.128339, -0.493207, -0.256604, 0.249531, -0.067701, 0.119784, 0.166723},
  {0.354564, -0.229711, -0.163861, -0.092707, 0.131100, 0.179489, 0.229623, 0.393972, -0.108486, 0.427415, -0.448049, 0.223295, -0.220239, 0.204917, -0.178833, -0.042590, 0.120151, -0.356988, -0.579765, -0.544034, -0.046825, 0.087830, 0.220688, 0.121172},
  {-0.202166, -0.028254, -0.039355, -0.063217, 0.163333, 0.129554, 0.031560, 0.164893, -0.108277, -0.119495, -0.038613, 0.037850, 0.101321, 0.118902, -0.203228, 0.029785, -0.007412, 0.209177, 0.100580, 0.115857, -0.104276, 0.217508, -0.005039, -0.083839},
  {0.238491, 0.182453, 0.059340, 0.225550, 0.302897, -0.082198, -0.107450, 0.003498, -0.151632, -0.102936, -0.004505, 0.105474, 0.003010, 0.049409, -0.161578, 0.185711, 0.253586, 0.061553, 0.072543, -0.167478, -0.040668, -0.160196, -0.066471, -0.169294},
  {0.104596, 0.082749, 0.121679, 0.004729, 0.397021, 0.280832, 0.087673, 0.548404, -0.027044, 0.003991, 0.005860, 0.064525, -0.236350, -0.154113, 0.371196, 0.036672, 0.036551, -0.201323, 0.020377, -0.199149, 0.143197, 0.076934, 0.218713, 0.453093},
  {-0.106094, -0.001718, -0.162483, 0.191324, 0.405072, 0.291753, -0.145227, 0.391733, -0.082347, -0.270915, 0.313302, -0.000829, 0.006904, -0.067361, 0.279140, 0.120905, -0.105145, -0.078909, 0.157982, -0.046139, 0.032512, 0.002663, 0.184853, 0.414112},
  {0.233878, -0.174256, 0.065183, 0.112490, 0.029439, 0.299915, -0.549835, 0.326429, -0.135025, -0.081717, 0.357618, -0.057272, 0.315560, 0.092485, 0.059374, 0.199203, 0.120365, -0.099223, 0.147336, -0.127026, -0.195627, -0.116555, 0.202060, -0.098652},
  {0.472408, -0.256952, 0.133032, -0.129140, 0.294055, 0.251970, -0.127872, 0.185209, 0.153777, 0.251562, -0.077031, -0.406567, -0.287607, -0.268688, -0.223624, 0.361018, 0.141017, 0.189344, -0.044952, 0.183115, -0.164480, -0.351056, 0.174343, 0.124284},
  {0.014856, 0.248073, -0.169989, 0.072682, 0.266003, 0.078699, 0.517682, -0.277863, -0.067450, 0.240264, -0.326011, 0.139829, -0.226240, 0.115091, -0.082974, -0.353162, 0.093052, 0.348207, -0.541786, -0.010762, -0.008203, 0.067562, 0.366610, 0.122473},
  {0.154962, 0.181599, -0.397972, 0.054761, 0.326876, 0.177740, 0.431784, -0.057568, -0.242802, 0.380412, -0.412414, 0.287469, 0.263280, 0.188511, 0.161516, -0.054002, -0.181011, -0.150710, -0.253908, -0.254435, 0.297724, 0.111078, -0.055029, 0.236968},
  {-0.002866, -0.197408, -0.130350, -0.065195, 0.233472, -0.091527, -0.180240, 0.384919, 0.228370, -0.406512, 0.239590, 0.227290, 0.258862, -0.005564, -0.118830, 0.090136, -0.063352, -0.344643, 0.174144, -0.312707, -0.031535, 0.333180, -0.013963, -0.161590},
  {0.029863, 0.256076, -0.110020, -0.119406, -0.095550, 0.232486, 0.020924, -0.061489, -0.106590, 0.214201, 0.146423, 0.006805, 0.147527, 0.296688, -0.072024, -0.056552, 0.129981, -0.203481, 0.290676, -0.244946, -0.190319, 0.016353, 0.018093, -0.012760},
  {0.333182, -0.123181, 0.070989, 0.102265, 0.091717, 0.128966, 0.016155, 0.399442, 0.001493, -0.070932, 0.195934, -0.092585, 0.215555, 0.277531, 0.178444, 0.243060, -0.092728, -0.551873, 0.372391, -0.535754, -0.174135, 0.465411, 0.416945, -0.108839},
  {0.037788, 0.175599, -0.266810, 0.304575, 0.112962, 0.080502, 0.196154, 0.210199, -0.026531, -0.211338, 0.395408, -0.049850, 0.400410, 0.048390, 0.022188, -0.040563, -0.201180, -0.103008, 0.018207, 0.152291, 0.269699, 0.070241, -0.122001, -0.041798},
  {0.247798, -0.207138, 0.120910, 0.372566, -0.244628, -0.280290, 0.032148, 0.124858, 0.094350, -0.278540, 0.405514, 0.144650, 0.356541, -0.045550, -0.062635, 0.219567, 0.224405, 0.094589, 0.468304, 0.059533, 0.064758, 0.119641, -0.287948, 0.092794},
  {0.017142, -0.031124, 0.093929, -0.125763, 0.118356, 0.077244, -0.114004, 0.103763, -0.205327, -0.148702, 0.188792, 0.160119, 0.161658, -0.135991, 0.167291, -0.057203, -0.147350, -0.030584, 0.141091, 0.005700, -0.030109, 0.212269, 0.018162, -0.013175},
  {-0.424724, -0.188257, -0.232944, 0.304713, 0.076931, -0.279398, 0.171544, 0.267754, 0.252215, -0.130648, 0.181404, 0.356186, 0.440679, 0.125353, -0.116213, 0.088822, 0.212562, -0.079091, -0.091250, 0.366445, 0.081056, 0.238921, 0.061186, 0.026718},
  {-0.399257, 0.242869, 0.257283, 0.246839, -0.202560, -0.039311, 0.198069, 0.073988, -0.082274, -0.093931, 0.149098, -0.344684, 0.069655, 0.343654, -0.098596, -0.162414, 0.239939, -0.117350, 0.101788, 0.253071, 0.008049, 0.267087, -0.133466, -0.161105},
  {0.100089, 0.225868, -0.014811, -0.156254, 0.083305, 0.130860, -0.043802, 0.031490, -0.120849, -0.283331, 0.389552, 0.002439, -0.113091, -0.208497, -0.115468, 0.192042, 0.092708, 0.184758, 0.376193, 0.064514, -0.168992, -0.043787, -0.067323, 0.042184},
  {-0.102750, -0.145298, -0.148969, 0.013083, 0.012152, -0.235712, -0.053023, -0.080059, 0.038951, -0.172430, 0.353910, -0.178788, 0.172118, -0.019758, -0.192797, 0.091997, -0.086383, -0.083082, 0.042240, -0.017879, -0.113104, -0.003261, -0.242533, -0.237544},
  {-0.088255, 0.179526, 0.021377, 0.129367, 0.082814, -0.424106, 0.136642, 0.243075, 0.009464, 0.002102, 0.291261, -0.130685, 0.249158, 0.069899, -0.180270, -0.084920, 0.342571, -0.484919, 0.247325, -0.227107, -0.199743, 0.332768, 0.111972, -0.323538},
  {-0.053186, 0.114281, 0.167260, 0.344693, -0.252044, -0.244387, -0.054256, -0.079553, -0.071335, 0.002183, 0.095660, 0.150091, 0.112784, 0.317488, -0.202040, -0.120677, -0.132149, -0.291819, 0.085480, -0.188914, -0.018708, 0.403758, -0.236541, -0.347801},
  {0.068666, 0.062718, -0.043781, 0.036789, -0.005934, -0.105540, 0.135447, 0.253980, -0.188730, 0.340533, -0.112389, -0.112545, 0.184655, 0.334575, -0.248848, -0.264968, 0.157460, 0.227130, -0.028403, -0.060552, 0.174461, 0.423162, -0.308326, 0.135766},
  {-0.131370, 0.093491, 0.231185, -0.178622, 0.074327, -0.060381, 0.322389, 0.089254, 0.106109, 0.214814, 0.040162, 0.334678, 0.149361, 0.078273, -0.234267, 0.177922, 0.234066, 0.108123, 0.005232, 0.402947, 0.243868, -0.175777, -0.097389, 0.092047},
  {-0.399290, -0.094555, 0.316619, 0.063862, -0.424419, -0.048461, -0.182672, -0.213269, 0.055920, -0.310595, 0.399643, -0.101665, 0.331782, 0.243360, -0.172407, -0.097600, 0.000818, -0.013590, 0.315799, 0.333307, -0.023050, 0.249559, -0.199178, -0.342966},
  {-0.177564, -0.150024, 0.370170, 0.249709, -0.470546, -0.323050, -0.385238, -0.082031, 0.163525, -0.033209, 0.303795, -0.398627, 0.286556, -0.131531, 0.053069, 0.148371, 0.041828, 0.003653, 0.186635, 0.184103, -0.032795, 0.070735, -0.382599, -0.075997},
  {0.331059, 0.121038, -0.087337, 0.090800, -0.273387, -0.073177, -0.448430, 0.145275, -0.168383, -0.324012, 0.383168, -0.173609, -0.137221, -0.053943, -0.080905, 0.564650, 0.271393, 0.179077, 0.401483, 0.215822, -0.013391, -0.358457, 0.058644, -0.357326}
};




float bias_hidden[] = {0.093412, 0.000000, 0.110464, 0.008775, 0.068233, 0.082116, 0.104829, 0.098776, 0.000000, 0.118286, 0.027991, 0.081256, 0.059798, 0.122816, -0.019340, 0.059847, -0.011057, 0.040207, 0.047419, 0.089125, 0.006612, 0.076701, 0.143901, 0.093954};


float weights_hidden_output[24][5] = {
  {-0.171729, 0.156012, -0.425968, -0.234150, 0.555531},
  {-0.122233, 0.288771, 0.440929, 0.446183, -0.076586},
  {-0.757646, 0.446137, 0.476637, 0.192236, 0.492440},
  {-0.553026, -0.130151, 0.376967, 0.035952, -0.370371},
  {-0.029945, -0.564275, -0.495170, -0.493980, 0.035897},
  {0.170880, 0.139212, -0.364237, -0.370754, 0.703668},
  {0.161700, -0.361596, -0.716781, 0.888129, -0.293802},
  {0.466570, -0.645855, 0.303448, -0.582717, 0.159425},
  {-0.186444, 0.067792, 0.409546, 0.217068, -0.371111},
  {-0.447546, -0.031135, -0.861713, 0.348554, 0.179808},
  {-0.218471, 0.387270, 0.595849, -0.168638, -0.066784},
  {0.657162, -0.115768, -0.212739, -0.677266, -0.313560},
  {0.341144, -0.461894, 0.252208, -0.393892, -0.592632},
  {-0.476517, -0.859306, 0.254482, 0.711182, -0.656995},
  {0.089846, -0.356531, 0.242710, -0.312692, 0.195752},
  {0.043212, 0.443672, 0.025182, -0.832752, 0.375893},
  {-0.674895, 0.059451, 0.141377, 0.174857, -0.123273},
  {0.185797, 0.777442, -0.762328, -0.162133, -0.367966},
  {-0.449672, 0.262128, 0.688109, -0.541348, -0.352902},
  {0.034790, 0.760704, 0.177249, 0.257074, -0.238959},
  {0.614836, -0.248926, -0.590877, 0.064839, -0.305355},
  {0.352550, -0.740125, 0.265844, 0.397535, -0.330375},
  {-0.645688, -0.785954, -0.509292, -0.303517, 1.020781},
  {0.572050, -0.344911, -0.421894, -0.310120, 0.347194}
};



float bias_output[] = {-0.074635, 0.077108, -0.067240, 0.058395, 0.007740};



// TFT display and touch screen setup
MCUFRIEND_kbv tft;
#define LCD_CS A3 // Chip Select goes to Analog 3
#define LCD_CD A2 // Command/Data goes to Analog 2
#define LCD_WR A1 // LCD Write goes to Analog 1
#define LCD_RD A0 // LCD Read goes to Analog 0
#define LCD_RESET A4 // Can alternately just connect to Arduino's reset pin

// Assign human-readable names to some common 16-bit color values:
#define BLACK   0x0000
#define WHITE   0xFFFF

// Touchscreen pins, obtained from the shield
#define YP A1  // must be an analog pin, use "An" notation!
#define XM A2  // must be an analog pin, use "An" notation!
#define YM 7   // can be a digital pin
#define XP 6   // can be a digital pin

// Use your calibration values
#define TS_MINX 141
#define TS_MAXX 943
#define TS_MINY 165
#define TS_MAXY 835

TouchScreen ts = TouchScreen(XP, YP, XM, YM, 300);

#define GRID_SIZE 8
#define CELL_SIZE 30

#define TOUCH_DELAY 75
#define BUTTON_DELAY 500

int grid[GRID_SIZE][GRID_SIZE] = {0};
unsigned long lastTouchTime = 0;
unsigned long lastButtonTime = 0;

char prediction[20];

void setup() {
  Serial.begin(9600);
  uint16_t identifier = tft.readID();
  tft.begin(identifier);
  tft.setRotation(1);
  tft.fillScreen(BLACK);
  tft.fillRect(250, 30, 60, 60, WHITE);

  drawGrid();
}

void loop() {
  unsigned long currentTime = millis();

  TSPoint p = ts.getPoint();
  if (p.z > ts.pressureThreshhold && (currentTime - lastTouchTime > TOUCH_DELAY)) {
    lastTouchTime = currentTime;

    pinMode(XM, OUTPUT);
    pinMode(YP, OUTPUT);

    int16_t mappedX = map(p.x, TS_MINX, TS_MAXX, tft.width(), 0); // Correct mirroring by swapping map range
    int16_t mappedY = map(p.y, TS_MINY, TS_MAXY, 0, tft.height());

    if (mappedX >= 0 && mappedX < GRID_SIZE * CELL_SIZE && mappedY >= 0 && mappedY < GRID_SIZE * CELL_SIZE) {
      int col = mappedX / CELL_SIZE;
      int row = mappedY / CELL_SIZE;

      grid[row][col] = !grid[row][col]; // Toggle cell state
      fillCell(row, col, grid[row][col] ? WHITE : BLACK);
    }

    // Check if the touch is within the button area
    if (mappedX >= 250 && mappedX <= 310 && mappedY >= 30 && mappedY <= 90 && (currentTime - lastButtonTime > BUTTON_DELAY)) {
      lastButtonTime = currentTime;
      performANNPrediction();

      tft.drawRect(250, 30, 60, 60, WHITE);
      tft.fillRect(251, 31, 58, 58, BLACK);
      delay(50);
      tft.fillRect(250, 30, 60, 60, WHITE);
    }

    // Display the prediction
    tft.fillRect(245, 175, 100, 30, BLACK);
    tft.setCursor(245, 175);
    tft.setTextColor(WHITE);
    tft.setTextSize(4);
    tft.print(prediction);
  }
}

void drawGrid() {
  tft.drawRect(0, 0, GRID_SIZE * CELL_SIZE, GRID_SIZE * CELL_SIZE, WHITE);
  for (int i = 1; i < GRID_SIZE; i++) {
    tft.drawFastHLine(0, i * CELL_SIZE, GRID_SIZE * CELL_SIZE, WHITE);
    tft.drawFastVLine(i * CELL_SIZE, 0, GRID_SIZE * CELL_SIZE, WHITE);
  }
}

void fillCell(int row, int col, uint16_t color) {
  tft.fillRect(col * CELL_SIZE + 1, row * CELL_SIZE + 1, CELL_SIZE - 1, CELL_SIZE - 1, color);
}

void performANNPrediction() {
  Serial.println("Grid State:");
  uint8_t input[64];
  for (int row = 0; row < GRID_SIZE; row++) {
    for (int col = 0; col < GRID_SIZE; col++) {
      input[row * GRID_SIZE + col] = grid[row][col];
      Serial.print(grid[row][col]);
      if (col < GRID_SIZE - 1) Serial.print(", ");
    }
    Serial.println();
  }

  float hidden[hidden_neurons];
  float output[output_neurons];
  forward(input, hidden, output);

  int predicted_digit = 0;
  float max_val = output[0];
  for (int j = 1; j < output_neurons; j++) {
    if (output[j] > max_val) {
      max_val = output[j];
      predicted_digit = j;
    }
  }

  snprintf(prediction, sizeof(prediction), "(%d)", predicted_digit);

  Serial.print("Prediction: ");
  Serial.println(prediction);
}

float relu(float x) {
  return x > 0 ? x : 0;
}

void softmax(float input[], float output[], int length) {
  float max_val = input[0];
  for (int i = 1; i < length; i++) {
    if (input[i] > max_val) {
      max_val = input[i];
    }
  }

  float sum = 0.0;
  for (int i = 0; i < length; i++) {
    output[i] = exp(input[i] - max_val);
    sum += output[i];
  }

  for (int i = 0; i < length; i++) {
    output[i] /= sum;
  }
}

void forward(const uint8_t input[], float hidden[], float output[]) {
  for (int i = 0; i < hidden_neurons; i++) {
    hidden[i] = 0.0;
    for (int j = 0; j < input_neurons; j++) {
      hidden[i] += input[j] * weights_input_hidden[j][i];
    }
    hidden[i] += bias_hidden[i];
    hidden[i] = relu(hidden[i]);
  }

  for (int i = 0; i < output_neurons; i++) {
    output[i] = 0.0;
    for (int j = 0; j < hidden_neurons; j++) {
      output[i] += hidden[j] * weights_hidden_output[j][i];
    }
    output[i] += bias_output[i];
  }

  softmax(output, output, output_neurons);
}
